"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{4556:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"develop-using-devcontainer","metadata":{"permalink":"/blog/develop-using-devcontainer","source":"@site/blog/2022-11-17-develop-podman-using-codespaces.md","title":"Build & run Podman Desktop in a DevContainer","description":"Develop Podman Desktop using a DevContainer locally or using GitHub Codespaces.","date":"2022-11-17T00:00:00.000Z","formattedDate":"November 17, 2022","tags":[{"label":"podman-desktop","permalink":"/blog/tags/podman-desktop"},{"label":"devcontainer","permalink":"/blog/tags/devcontainer"},{"label":"codespaces","permalink":"/blog/tags/codespaces"}],"readingTime":6.985,"hasTruncateMarker":true,"authors":[{"name":"Florent Benoit","title":"Maintainer of Podman Desktop","url":"https://github.com/benoitf","imageURL":"https://github.com/benoitf.png","key":"benoitf"}],"frontMatter":{"title":"Build & run Podman Desktop in a DevContainer","description":"Develop Podman Desktop using a DevContainer locally or using GitHub Codespaces.","slug":"develop-using-devcontainer","authors":["benoitf"],"tags":["podman-desktop","devcontainer","codespaces"],"hide_table_of_contents":false}},"content":"GitHub [announced last week](https://github.blog/changelog/2022-11-09-codespaces-for-free-and-pro-accounts/) that Codespaces is available for everyone and it includes free minutes.\\n\\nLet see how we can use a [Development Container](https://containers.dev/) having all the tools to build and run Podman Desktop. The Development Container works locally using Visual Studio Code but in this blog post we will see how it works directly with a simple click from GitHub.\\n\\nThe challenges are to run a desktop tool (Podman Desktop) and running a container engine (Podman) inside this Development Container without using too many memory !\\n\\n\x3c!--truncate--\x3e\\n\\n## Defining image of the container\\n\\nThe first thing is in the choice of the image for the container. It is possible to pick-up a default image and add some features but there is no existing feature for Podman at https://github.com/devcontainers/features/tree/main/src and most of the features are expecting to run on top of Debian/Ubuntu\\n\\nIf you are not interested in how to setup the image, jump to the [next section](#configure-the-devcontainer-using-devcontainerjson).\\n\\nPodman binaries are available quickly after the releases for Fedora. I decided then to use `Fedora 37` as the base image.\\n\\nLet start the Containerfile using:\\n\\n```docker\\nFROM quay.io/fedora/fedora:37\\n```\\n\\nThen I install Node.js 16 from official nodejs.org repository. It\'s easier to switch to the version that we need.\\n\\n```docker\\n# install Node.js + yarn\\nENV NODE_VERSION 16.18.1\\nRUN curl -SLO \\"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz\\" && \\\\\\n    tar -xzf \\"node-v$NODE_VERSION-linux-x64.tar.gz\\" -C /usr/local --strip-components=1 && \\\\\\n    rm \\"node-v$NODE_VERSION-linux-x64.tar.gz\\" && \\\\\\n    npm install -g yarn\\n```\\n\\nNow, all system dependencies used to run an Electron application needs to be installed.\\n\\nPodman is also installed so we can run some containers inside this container.\\n\\nAnd of course, we need to install VNC (I choose [tigervnc](https://tigervnc.org/)) with a light Window Manager ([fluxbox](http://fluxbox.org/)).\\n\\nTo connect to the display of the container, we need to expose VNC over HTML/websocket using [noVNC](https://novnc.com/)\\n\\nxterm is installed to start a terminal from the VNC side.\\n\\n```docker\\nRUN dnf -y update && \\\\\\n    yum -y reinstall shadow-utils && \\\\\\n    yum install -y git \\\\\\n                   # dependencies for Podman Desktop\\n                   nss \\\\\\n                   atk \\\\\\n                   at-spi2-atk \\\\\\n                   cups-libs \\\\\\n                   gtk3 \\\\\\n                   # for remote Display\\n                   fluxbox \\\\\\n                   tigervnc-server \\\\\\n                   xorg-x11-fonts-Type1 \\\\\\n                   novnc \\\\\\n                   supervisor \\\\\\n                   xdpyinfo \\\\\\n                   # for podman\\n                   podman \\\\\\n                   fuse-overlayfs --exclude container-selinux \\\\\\n                   xterm && \\\\\\n    rm -rf /var/cache /var/log/dnf* /var/log/yum.*\\n```\\n\\nSupervisord setup the launch of the VNC server and the Window manager\\n\\n```docker\\nCOPY supervisord.conf /etc/supervisord.conf\\n```\\n\\nA custom theme for fluxbox:\\n```docker\\nCOPY fluxbox /usr/share/fluxbox/init\\n```\\n\\n\\nThen we need a special configuration to allow to have Podman working inside the container\\n\\nWe add the `podman-desktop` user with correct range on subuid and subgid when running containers. I used the [tutorial](https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#etcsubuid-and-etcsubgid-configuration).\\n\\n\\n```docker\\nRUN useradd -u 1000 podman-desktop && echo podman-desktop:10000:5000 > /etc/subuid && echo podman-desktop:10000:5000 > /etc/subgid\\n```\\n\\nThen use some default configuration files\\n```docker\\n# initialize conf files\\nADD https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable/containers.conf /etc/containers/containers.conf\\nADD https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable/podman-containers.conf /home/podman-desktop/.config/containers/containers.conf\\n```\\n\\nand make sure that all permissions are correct following the guide [https://www.redhat.com/sysadmin/podman-inside-container](https://www.redhat.com/sysadmin/podman-inside-container)\\n\\n```docker\\n# set permissions\\nRUN chown podman-desktop:podman-desktop -R /home/podman-desktop && chmod 644 /etc/containers/containers.conf && \\\\\\n    mkdir -p /var/lib/shared/overlay-images /var/lib/shared/overlay-layers /var/lib/shared/vfs-images /var/lib/shared/vfs-layers; touch /var/lib/shared/overlay-images/images.lock; touch /var/lib/shared/overlay-layers/layers.lock; touch /var/lib/shared/vfs-images/images.lock; touch /var/lib/shared/vfs-layers/layers.lock && \\\\\\n    mkdir -p /run/user/1000 && chown podman-desktop:podman-desktop /run/user/1000\\n```\\n\\nplus define an empty user namespace.\\n\\n```docker\\nENV _CONTAINERS_USERNS_CONFIGURED=\\"\\"\\n```\\n\\nMake sure Podman will create the socket in an expected directory:\\n```\\n# socket path for podman\\nENV XDG_RUNTIME_DIR=/run/user/1000\\n```\\n\\nOK ! we have a custom Containerfile providing all the tools to build and run Podman Desktop (using VNC for the display), run Podman and run Electron.\\n\\nThe current file is available at https://github.com/containers/podman-desktop/blob/main/.devcontainer/.parent/Containerfile\\n\\n\\nLet\'s configure the DevContainer.\\n\\n\\n\\n## Configure the DevContainer using devcontainer.json\\n\\nDevContainer definition is stored at `.devcontainer/devcontainer.json` file.\\n\\nWe need to reuse the image of the previous step. For that let\'s use the build section of the `devcontainer.json` file.\\n\\n```json\\n\\"build\\": {\\n  \\"dockerfile\\": \\"Containerfile\\"\\n},\\n```\\n\\nIn order to avoid to redo all the build steps each time we open a workspace using this dev container, we published the image to quay.io at [quay.io/podman-desktop/devcontainer-parent:next\\n](https://quay.io/repository/podman-desktop/devcontainer-parent?tab=tags&tag=next). This parent image is not changing much so it\'s better to use is as a parent one.\\n\\nInside `.devcontainer` directory there is a `.parent` directory with everything related to the parent image.\\n\\nAnd in the `.devcontainer/Containerfile` file we reference this image\\n\\n\\n```docker\\nFROM quay.io/podman-desktop/devcontainer-parent:next\\n```\\n\\nBy default, we will be `root` in the container and this is probably not what we expect. Let\'s change that.\\n\\n```json\\n\\"containerUser\\": \\"podman-desktop\\"\\n```\\n\\nSome Visual Studio Code extensions are nice to use and we can add them\\n```json\\n  \\"extensions\\": [\\"svelte.svelte-vscode\\", \\"bradlc.vscode-tailwindcss\\"]\\n```\\n\\nThen here is the tricky part, how to run our container allowing to run again inside the container some containers with podman.\\n\\nWe specify the arguments to make it possible. It\'s possible to use `--privileged` flag but I prefer to list the subset of permissions.\\nUsing `--privileged` we don\'t really know what are the privilege that are required while specifying all of them, people are aware of what is granted/denied.\\n\\n```json\\n\\"runArgs\\": [\\n    \\"--cap-add=sys_admin\\",\\n    \\"--security-opt\\",\\n    \\"seccomp=unconfined\\",\\n    \\"--device\\",\\n    \\"/dev/fuse\\",\\n    \\"--security-opt\\",\\n    \\"label=disable\\",\\n    \\"--security-opt\\",\\n    \\"apparmor=unconfined\\"\\n  ],\\n```\\n\\nSource code of Podman Desktop needs to be editable within the DevContainer so it needs to be mounted.\\n\\n```json\\n\\"workspaceMount\\": \\"source=${localWorkspaceFolder},target=/workspace,type=bind\\",\\n\\"workspaceFolder\\": \\"/workspace\\",\\n```\\n\\nThen we need a command to build Podman Desktop.\\n\\nFor that, we use `onCreateCommand` hook with a custom command\\n\\n```json\\n\\"onCreateCommand\\": \\"${containerWorkspaceFolder}/.devcontainer/onCreateCommand.sh\\",\\n```\\n\\nand in the `.devcontainer` folder the `onCreateCommand.sh` script is the following\\n\\n```shell\\n#!/bin/sh\\nyarn\\n\\nMODE=production yarn run build && yarn run electron-builder build --linux --dir --config .electron-builder.config.js\\n```\\n\\nTwo instructions:\\n1. Fetch all Node.js dependencies.\\n2. build Podman Desktop in the `dist` folder using `Linux` as target Operating System.\\n\\nAfter the start of the container, how to launch Podman Desktop, the website and VNC, etc ?\\n\\nJust use `postStartCommand` hook.\\n\\n```json\\n\\"postStartCommand\\": \\"${containerWorkspaceFolder}/.devcontainer/postStartCommand.sh\\",\\n```\\n\\nand in the `.devcontainer` folder the `postStartCommand.sh` script is the following:\\n\\n```shell\\n#!/bin/sh\\n\\n# Start all services\\n/usr/bin/supervisord -c /etc/supervisord.conf &\\n\\n# wait X server to be ready or after 2mn exit\\necho \\"Waiting for X server to be ready\\"\\ntimeout 120 bash -c \'until xdpyinfo -display :0 &> /dev/null; do printf \\".\\"; sleep 1; done\'\\n\\n# launch podman desktop\\necho \\"Launching Podman Desktop\\"\\ncd dist/linux-unpacked/&& ./podman-desktop &\\n\\n# Launch the 9000 redirect after 20 seconds\\nsleep 20\\nwebsockify --web=/usr/share/novnc localhost:9000 localhost:5900 &\\n\\n# launch the website rendering\\necho \\"Launching Website\\"\\ncd website && yarn start\\n```\\n\\nIt starts VNC and noVNC, start precompiled Podman Desktop and start the documentation rendering.\\n\\nIt is not launching the Watch mode/development mode of Podman Desktop as it requires a container having more than 8GB of memory.\\n\\nPicking up a larger instace with for example 16GB, it\'s possible to use development mode.\\n\\nOf course, to make VNC happy, we need to specify the `DISPLAY` environment variable.\\n\\n```json\\n\\"remoteEnv\\": {\\n  \\"DISPLAY\\": \\":0\\"\\n}\\n```\\n\\nWhen the DevContainer is fully available, we want to have a way to quickly open the `Website rendering URL` and `noVNC`\\n\\nLet\'s tweak the `devcontainer.json` file by adding the `portsAttributes` section\\n\\n```json\\n\\"portsAttributes\\": {\\n  \\"9000\\": {\\n    \\"label\\": \\"vnc\\",\\n    \\"onAutoForward\\": \\"openPreview\\"\\n  },\\n  \\"3000\\": {\\n    \\"label\\": \\"website\\"\\n  }\\n}\\n```\\n\\nAfter all post-creation steps, the `Preview` browser inside the VS Code editor will open a window to VNC. And another port (`3000`) is flagged for the website.\\n\\n\\n## Using the DevContainer.json on Github Codespace\\n\\nAs a user, opening a workspace with all what we configured is done using a single click.\\n\\nGo to https://github.com/containers/podman-desktop then click on the `< > Code` dropdown and click on `Create codespace on main` button.\\n\\n![Open Codespace](img/develop-podman-using-codespaces/codespaces-click-repository.png)\\n\\nOnce you click on the button, the codespace is setting up:\\n\\n![Preparing Codepace](img/develop-podman-using-codespaces/codespaces-preparing-codespace.png)\\n\\nAfter few minutes, as there is not yet [prebuilt codespaces](https://docs.github.com/en/codespaces/prebuilding-your-codespaces/about-github-codespaces-prebuilds), the codespace is opening.\\n\\nThe simple Browser displays the noVNC window:\\n![Opening Codespace](img/develop-podman-using-codespaces/codespaces-open-novnc.png)\\n\\nClick on the connect button. Then on the terminal you can enter `podman run quay.io/podman/hello` and the container is detected in Podman Desktop.\\n![Testing Codespace](img/develop-podman-using-codespaces/codespaces-testing-podman-desktop.png)\\n\\nIt\'s also possible using the port widget to get on `3000` port by clicking on the world icon a preview of the website in another tab. Changing source code of the website will refresh the content of the window.\\n\\nDepending on the usecase, it\'s also possible to open documentation in the preview browser.\\n\\n![Edit website Codespace](img/develop-podman-using-codespaces/codespaces-edit-website.png)\\n\\n## Conclusion\\n\\nThe DevContainer image for Podman Desktop is recent so it\'ll probably evolve over time by adding new capabilities but it allows you to easily build/run/experiment and **contribute** to the tool or the website."}]}')}}]);